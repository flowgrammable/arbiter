-- Copyright (C) 2013, Texas A&M University
-- Copyright (C) 2014, Gabriel Dos Reis.
-- All rights reserved.
-- Written by Michael Lopez.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--     - Redistributions of source code must retain the above copyright
--       notice, this list of conditions and the following disclaimer.
--
--     - Redistributions in binary form must reproduce the above copyright
--       notice, this list of conditions and the following disclaimer in
--       the documentation and/or other materials provided with the
--       distribution.
--
--     - Neither the name of Liz, nor the names of its contributors may
--       be used to endorse or promote products derived from this software
--       without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
-- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-- TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-- PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
-- OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-- DataType.liz
-- This file defines a collection of common types.


-------------------------
--| Prospective types |--
-------------------------
-- Type stubs for future types.

-- When type isn't fully understood, but a stub is required, use the Unknown
-- type.
define Unknown: type = inductive { unknown: Unknown }
define FIXME_no_op: int = 0


------------------
--| Maybe type |--
------------------

-- The `Maybe` type function
--    Maybe: (type) -> type
-- The `Maybe` type extends any type `t` by a single distinct value `none`.
define Maybe(t:type): type = inductive
  none: Maybe t
  some: (t) -> Maybe t

-- True iff `m` is `none`.
define forall(t: type), is_none(m: Maybe t): bool =
  match m with
    case none    => true
    case some(x) => false

-- True iff `m` is `some`
define forall(t: type), is_some(m: Maybe t): bool =
  match m with
    case none    => false
    case some(x) => true



------------------
--| Array type |--
------------------

-- Add an element to the front of an array
define forall(t: type), cons_back(x: t, arr: Array t): Array t =
  define n: int = size arr
  define i: int = 0
  define new_array: Array t = mk_array(n + 1)
  while i != n repeat
    set(new_array, i, get(arr, i))
    i := i + 1
  set(new_array, i, x)
  return new_array

-- Add an element to the back of an array
define forall(t: type), cons_front(x: t, arr: Array t): Array t =
  define n: int = size arr
  define i: int = 0
  define new_array: Array t = mk_array(n + 1)
  while i != n repeat
    set(new_array, i + 1, get(arr, i))
    i := i + 1
  set(new_array, 0, x)
  return new_array

define forall (t: type), concat(a: Array t, b: Array t): Array t =
  define na: int = size a
  define nb: int = size b
  define c: Array t = mk_array(na + nb)
  define i: int = 0
  while i != na repeat
    set(c, i, get(a, i))
    i := i + 1
  i := 0
  while i != nb repeat
    set(c, i + na, get(b, i))
    i := i + 1
  return c

define forall(t:type), singleton(x:t): Array t =
  define arr: Array t = mk_array 1
  set(arr, 0, x)
  return arr